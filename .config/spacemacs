;; -*- mode: emacs-lisp; lexical-binding: t -*-

;; This file is designed to be plugged into an unchanged ~/.spacemacs file
;; This allows you to only set the options you actually want to change,
;; and use the default values for everything else.
;;
;; Add (load "~/.config/spacemacs") to the end of ~/.spacemacs to enable
;; the options from this file. If you want to load emacs with the defaults,
;; just comment out loading this file.

(defun dotspacemacs/user-layers ()
	(setq-default dotspacemacs-configuration-layers '(
		auto-completion
		colors
		dap
		git
		ivy
		lsp
		syntax-checking
		tabs
		themes-megapack
		version-control

		(treemacs :variables
			treemacs-use-git-mode 'extended)

		(c-c++ :variables
			c-c++-backend 'lsp-ccls
			c-c++-enable-clang-support t
			c-c++-enable-clang-format-on-save t
			c-c++-adopt-subprojects t)

		(go :variables
			go-backend 'lsp
			go-format-before-save t
			go-tab-width nil)

		emacs-lisp
		json
		markdown
		meson
		shell-scripts
		systemd
		yaml))

	(setq-default dotspacemacs-additional-packages '(
		(tramp :location elpa)))
)

(advice-add 'dotspacemacs/layers :after #'dotspacemacs/user-layers)

(defun dotspacemacs/user-init ()
	(setq-default
		dotspacemacs-themes '(doom-Iosvkem)
		dotspacemacs-mode-line-theme '(spacemacs :separator arrow)
		dotspacemacs-scratch-buffer-persistent t
		dotspacemacs-line-numbers t)

	(setq-default
		doom-Iosvkem-brighter-comments t
		doom-Iosvkem-comment-bg t
		doom-Iosvkem-padded-modeline t)

	(setq server-socket-dir "/tmp/emacs")

	(require 'whitespace)
	(setq whitespace-style '(
		face
		empty
		indentation
		lines-tail
		space-after-tab
		space-before-tab
		trailing))

	(global-whitespace-mode t)
	(global-display-fill-column-indicator-mode t)
)

;; Read the maximum line length for whitespace mode from editorconfig
(defun editorconfig/mark-whitespace (length)
	(setq whitespace-line-column fill-column)
)

(advice-add 'editorconfig-set-line-length :after #'editorconfig/mark-whitespace)

(defun toolbox/list ()
	(cdr (apply #'process-lines "flatpak-spawn"
		(list "--host" "toolbox" "list" "-c")))
)

(defun toolbox/parse-list (&optional ignored)
	(cl-loop for line in (toolbox/list)
		for info = (split-string line "[[:space:]]+" t)
		collect (list "" (nth 1 info)))
)

(defun toolbox/default ()
	(shell-command-to-string
		"flatpak-spawn --host sh -c 'echo -n fedora-toolbox-$(rpm -E %fedora)'")
)

(defun toolbox/add-method ()
	(add-to-list 'tramp-methods `("tb"
		(tramp-login-program "flatpak-spawn")
		(tramp-login-args (("--host") ("toolbox")
			("run") ("-c") ("%h") ("/bin/sh")))

		(tramp-remote-shell "/bin/sh")
		(tramp-remote-shell-args ("-c"))))

	(tramp-set-completion-function "tb" '((toolbox/parse-list "")))
	(add-to-list 'tramp-default-host-alist `("tb" nil ,(toolbox/default)))
)

(with-eval-after-load 'tramp (toolbox/add-method))

(defun lsp/register-remote-servers ()
	(lsp-register-client
		(make-lsp-client
			:new-connection (lsp-tramp-connection "ccls")
			:major-modes '(c-mode c++-mode)
			:server-id 'ccls-remote
			:remote? t))
)

(with-eval-after-load 'lsp-mode (lsp/register-remote-servers))
